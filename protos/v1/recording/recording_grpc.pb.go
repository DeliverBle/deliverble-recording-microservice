// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/v1/recording/recording.proto

package deliverble_recording_microservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordingTaskClient is the client API for RecordingTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordingTaskClient interface {
	UploadRecording(ctx context.Context, in *UploadRecordingRequest, opts ...grpc.CallOption) (*UploadRecordingResponse, error)
	UploadRecordingV2(ctx context.Context, in *UploadRecordingRequest, opts ...grpc.CallOption) (*UploadRecordingResponse, error)
}

type recordingTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingTaskClient(cc grpc.ClientConnInterface) RecordingTaskClient {
	return &recordingTaskClient{cc}
}

func (c *recordingTaskClient) UploadRecording(ctx context.Context, in *UploadRecordingRequest, opts ...grpc.CallOption) (*UploadRecordingResponse, error) {
	out := new(UploadRecordingResponse)
	err := c.cc.Invoke(ctx, "/prod.recording.recording_task/UploadRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingTaskClient) UploadRecordingV2(ctx context.Context, in *UploadRecordingRequest, opts ...grpc.CallOption) (*UploadRecordingResponse, error) {
	out := new(UploadRecordingResponse)
	err := c.cc.Invoke(ctx, "/prod.recording.recording_task/UploadRecordingV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordingTaskServer is the server API for RecordingTask service.
// All implementations must embed UnimplementedRecordingTaskServer
// for forward compatibility
type RecordingTaskServer interface {
	UploadRecording(context.Context, *UploadRecordingRequest) (*UploadRecordingResponse, error)
	UploadRecordingV2(context.Context, *UploadRecordingRequest) (*UploadRecordingResponse, error)
	mustEmbedUnimplementedRecordingTaskServer()
}

// UnimplementedRecordingTaskServer must be embedded to have forward compatible implementations.
type UnimplementedRecordingTaskServer struct {
}

func (UnimplementedRecordingTaskServer) UploadRecording(context.Context, *UploadRecordingRequest) (*UploadRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRecording not implemented")
}
func (UnimplementedRecordingTaskServer) UploadRecordingV2(context.Context, *UploadRecordingRequest) (*UploadRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRecordingV2 not implemented")
}
func (UnimplementedRecordingTaskServer) mustEmbedUnimplementedRecordingTaskServer() {}

// UnsafeRecordingTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingTaskServer will
// result in compilation errors.
type UnsafeRecordingTaskServer interface {
	mustEmbedUnimplementedRecordingTaskServer()
}

func RegisterRecordingTaskServer(s grpc.ServiceRegistrar, srv RecordingTaskServer) {
	s.RegisterService(&RecordingTask_ServiceDesc, srv)
}

func _RecordingTask_UploadRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingTaskServer).UploadRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prod.recording.recording_task/UploadRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingTaskServer).UploadRecording(ctx, req.(*UploadRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingTask_UploadRecordingV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingTaskServer).UploadRecordingV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prod.recording.recording_task/UploadRecordingV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingTaskServer).UploadRecordingV2(ctx, req.(*UploadRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordingTask_ServiceDesc is the grpc.ServiceDesc for RecordingTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prod.recording.recording_task",
	HandlerType: (*RecordingTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadRecording",
			Handler:    _RecordingTask_UploadRecording_Handler,
		},
		{
			MethodName: "UploadRecordingV2",
			Handler:    _RecordingTask_UploadRecordingV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/v1/recording/recording.proto",
}
